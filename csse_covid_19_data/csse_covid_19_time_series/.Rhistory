install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("car")
install.packages("pwr")
install.packages("odbc")
install.packages("xlsx")
install.packages("DBI")
install.packages("readr")
install.packages("ggplot2")
install.packages("htmlwidgets")
install.packages("maps")
install.packages("ggmaps")
install.packages("shiny")
install.packages("shinythemes")
check <- data("mtcars")
view(check)
library(tidyr)
library(stringr)
library(tibble)
view(check)
check <- data("mtcars")
check
view(check)
force(mtcars)
check <- data("mtcars")
check
force(mtcars)
data("fruit")
force(fruit)
fruits <- data("fruit")
force(fruit)
fruits <- data("fruit")
force(fruit)
sentences <- data("sentences")
sentences <- data("sentences")
data("sentences")
force(sentences)
help("datasets")
data("relig_income")
force(relig_income)
force(relig_income)
View(relig_income)
library(dplyr)  # Data Manipulation
library(tidyr) # Formats
library(stringr) #  String Functions
library(lubridate)  # Date Functions
library(car) # Anova
library(pwr) # AB-testing
library(odbc)   # Connection Database
library(xlsx)  # Connection Excel
library(DBI) # Connection Relational Database
library(readr) # Connection CSV
library(ggplot2) # Graphs
library(htmlwidgets) # Graphs for interactive websites
library(maps)  # Input Polygons
library(ggmaps) # Maps from Google
library(shiny) # Interactive Web Applications
library(shinythemes) # Formats for Shiny
# Libraries #
library(dplyr)  # Data Manipulation
library(tidyr) # Formats
library(stringr) #  String Functions
library(lubridate)  # Date Functions
library(car) # Anova
library(pwr) # AB-testing
library(odbc)   # Connection Database
library(xlsx)  # Connection Excel
library(DBI) # Connection Relational Database
library(readr) # Connection CSV
library(ggplot2) # Graphs
library(htmlwidgets) # Graphs for interactive websites
library(maps)  # Input Polygons
library(shiny) # Interactive Web Applications
library(shinythemes) # Formats for Shiny
library (pwr)
prop.test(c (225, 250), c (3450, 3000))
install.packages (“bayesAB”)
install.packages (“bayesAB”)
install.packages(“bayesAB”)
library (bayesAB)
install.packages("bayesAB")
library (bayesAB)
A_binom <- rbinom (3450, 1, 0.065)
B_binom <- rbinom (3000, 1, 0.083)
# Check normal distribution width
plotBeta (1, 1)
## More specific range of p (check with what you know historically about the distribution)
plotBeta (100, 200)
## More specific range of p (check with what you know historically about the distribution)
plotBeta (100, 200)
## More specific range of p (check with what you know historically about the distribution)
plotBeta (100, 200)
# Check normal distribution width
plotBeta (1, 1)
## More specific range of p (check with what you know historically about the distribution)
plotBeta (100, 200)
# AB-test 1, with normal distribution width
AB1 <- bayesTest (A_binom, B_binom,
priors = c ('alpha' = 1, 'beta' = 1),
distribution = 'bernoulli')
# AB-test 1, with normal distribution width
AB1 <- bayesTest (A_binom, B_binom,
priors = c ('alpha' = 1, 'beta' = 1),
distribution = 'bernoulli')
View(AB1)
AB2 <- bayesTest (A_binom, B_binom,
priors = c ('alpha' = 100,'beta' = 200),
distribution = 'bernoulli')
library(dplyr)
# TestDataset from Guru99
PATH <- "https:##raw.githubusercontent.com/guru99-edu/R-Programming/master/poisons.csv"
# TestDataset from Guru99
PATH <- "https://raw.githubusercontent.com/guru99-edu/R-Programming/master/poisons.csv"
df <- read.csv(PATH)  # Read Data
View(df)
%>% select(-X) # Remove Column you wont use
df <- read.csv(PATH)  # Read Data
df %>% select(-X) # Remove Column you wont use
df %>% mutate(poison = factor(poison, ordered = TRUE))  # Make Factor
glimpse(df)  # Check result
# Check the number of levels from your Factor
levels(df$poison)
# Check the number of levels from your Factor
levels(df$poison)
df <- df %>% select(-X) # Remove Column you wont use
df <- df %>% mutate(poison = factor(poison, ordered = TRUE))  # Make Factor
glimpse(df)  # Check result
# Check the number of levels from your Factor
levels(df$poison)
df %>% 	group_by(poison)   #Group by Factor
df <- df %>% 	summarise(count_poison = n()    # Number of Records
, 		mean_time = mean(time, na.rm = TRUE) # Mean, without Missing Values
, 		sd_time = sd(time, na.rm = TRUE))   # Standard Deviation, without Missing Values
View(AB1)
df <- df %>% 	summarise(count_poison = n(),    # Number of Records
mean_time = mean(time, na.rm = TRUE), # Mean, without Missing Values
sd_time = sd(time, na.rm = TRUE))   # Standard Deviation, without Missing Values
df <- df %>% 	summarise(count_poison = n(),    # Number of Records
mean_time = mean(time, na.rm = TRUE), # Mean, without Missing Values
sd_time = sd(time, na.rm = TRUE),)   # Standard Deviation, without Missing Values
View(df)
df <- read.csv(PATH)  # Read Data
View(df)
df <- df %>% select(-X) # Remove Column you wont use
df <- df %>% mutate(poison = factor(poison, ordered = TRUE))  # Make Factor
glimpse(df)  # Check result
# Check the number of levels from your Factor
levels(df$poison)
df %>% 	group_by(poison)   #Group by Factor
df <- df %>% 	group_by(poison)   #Group by Factor
df <- df %>% 	summarise(count_poison = n(),    # Number of Records
mean_time = mean(time, na.rm = TRUE), # Mean, without Missing Values
sd_time = sd(time, na.rm = TRUE))   # Standard Deviation, without Missing Values
View(df)
# Make Plot to Visualize Differences
library(ggplot)
ggplot(df, aes(x = poison, y = time, fill = poison))    # Select Axis X, Y, and Fill
ggplot(df, aes(x = poison, y = time, fill = poison)) +    # Select Axis X, Y, and Fill
geom_boxplot() +  # Type of Graph - Boxplot
geom_jitter(shape = 15, color = "steelblue", position = position_jitter(0.21)) +  # Show the lose samples as blue dots with space.
theme_classic()   # Format of Graph in General
ggplot(df, aes(x = poison, y = time, fill = poison)) +    # Select Axis X, Y, and Fill
geom_boxplot() +  # Type of Graph - Boxplot
geom_jitter(shape = 15, color = "steelblue", position = position_jitter(0.21)) +  # Show the lose samples as blue dots with space.
theme_classic()   # Format of Graph in General
ggplot(df, aes(x = poison, y = time, fill = poison))     # Select Axis X, Y, and Fill
View(df)
df <- read.csv(PATH)  # Read Data
df <- df %>% select(-X) # Remove Column you wont use
df <- df %>% mutate(poison = factor(poison, ordered = TRUE))  # Make Factor
ggplot(df, aes(x = poison, y = time, fill = poison))     # Select Axis X, Y, and Fill
ggplot(df, aes(x = poison, y = time, fill = poison)) +     # Select Axis X, Y, and Fill
geom_boxplot() +  # Type of Graph - Boxplot
geom_jitter(shape = 15, color = "steelblue", position = position_jitter(0.21)) +  # Show the lose samples as blue dots with space.
theme_classic()   # Format of Graph in General
#Make One-Way Anova
anova_one_way <- aov(time~poison, data = df) # Y = Time ; X = Poison
View(anova_one_way)
# Summarize Statistics
summary(anova_one_way)
# Make Two-Way Anova
# Added "Treat" as independent variable
anova_two_way <- aov(time~poison + treat, data = df) # Y = Time ; X1 = Poison ; X2 = Treat
# Summarize Statistics
summary(anova_two_way)
plot(relig_income, relig_income$religion ~ relig_income$`>150k`)
plot(relig_income$religion ~ relig_income$`>150k`)
relig_income
religion <- relig_income %>% group_by(religion)
religion
summarise(n=n())
religion %>% summarise(n=n())
religion %>% summarise(n=n()
, som = sum(n))
##################
### Libraries
##################
library(dplyr)  # Data Manipulation
library(tidyr) # Formats
library(stringr) #  String Functions
library(lubridate)  # Date Functions
library(car) # Anova
library(pwr) # AB-testing
library(odbc)   # Connection Database
library(xlsx)  # Connection Excel
library(DBI) # Connection Relational Database
library(readr) # Connection CSV
library(ggplot2) # Graphs
library(htmlwidgets) # Graphs for interactive websites
library(maps)  # Input Polygons
library(shiny) # Interactive Web Applications
library(shinythemes) # Formats for Shiny
library(rmarkdown)  # Create Reports
##################
### Datasets
##################
# Standard Working Directory
# "C:/Users/oscar/OneDrive/Documenten"
# Path #
path <- "C:/Users/oscar/OneDrive/Documenten/COVID-19/csse_covid_19_data/csse_covid_19_time_series"
# Check Files in Directory
files <- list.files(path)
files
# Set Working Directory
setwd(path)
# Read CSVs #
CoronaConfirmed <- read.csv(files[2], header = TRUE)
CoronaDeaths <- read.csv(files[3], header = TRUE)
CoronaRecovered <- read.csv(files[4], header = TRUE)
# Date
date <- Sys.Date()
View(CoronaConfirmed)
# Path #
path <- "C:/Users/oscar/OneDrive/Documenten/COVID-19/csse_covid_19_data/csse_covid_19_time_series"
# Check Files in Directory
files <- list.files(path)
files
# Read CSVs #
CoronaConfirmed <- read.csv(files[2], header = TRUE)
CoronaDeaths <- read.csv(files[3], header = TRUE)
CoronaRecovered <- read.csv(files[4], header = TRUE)
# Check the file
summary(CoronaConfirmed)
# Remove first column of All
CoronaConfirmed <- CoronaConfirmed[-1]
CoronaDeaths <- CoronaDeaths[-1]
CoronaRecovered <- CoronaRecovered[-1]
# Select last value
last_day <- ncol(CoronaConfirmed)
# Add Totals
names(CoronaConfirmed)[last_day] <-  "Total"
## Make Subset of Country and Amount
Subset <- CoronaConfirmed %>% select(Country.Region, Total)
names(Subset)[1] <- "Country"
names(Subset)[2] <- "Total"
plot(Subset$Total ~ Subset$Country)
# Plot
ggplot(Subset, aes(x = Country, y = Total)) +
geom_point()
# Plot Map
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("maps")
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- ne_countries(scale = "medium", returnclass = "sf") class(world)
class(world)
# Plot World
worldplot <- ggplot(data = world) + geom_sf()
worldplot
# Fillin Corona
worldplot + geom_point(data = CoronaConfirmed, aes(x = Long, y = Lat), size = 2,
shape = 23, fill = "orange")
# Check Files in Directory
files <- list.files(path)
files
# Set Working Directory
setwd(path)
# Read CSVs #
CoronaConfirmed <- read.csv(files[2], header = TRUE)
CoronaDeaths <- read.csv(files[3], header = TRUE)
CoronaRecovered <- read.csv(files[4], header = TRUE)
# Date
date <- Sys.Date()
# Check the file
summary(CoronaConfirmed)
CoronaConfirmed <- CoronaConfirmed[-1]
CoronaDeaths <- CoronaDeaths[-1]
CoronaRecovered <- CoronaRecovered[-1]
# Select last value
last_day <- ncol(CoronaConfirmed)
# Add Totals
names(CoronaConfirmed)[last_day] <-  "Total"
## Make Subset of Country and Amount
Subset <- CoronaConfirmed %>% select(Country.Region, Total)
names(Subset)[1] <- "Country"
names(Subset)[2] <- "Total"
plot(Subset$Total ~ Subset$Country)
# Plot
ggplot(Subset, aes(x = Country, y = Total)) +
geom_point()
# Plot Map
library("ggplot2")
theme_set(theme_bw())
#install.packages("sf")
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
#install.packages("rgeos")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("maps")
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
# Plot World
worldplot <- ggplot(data = world) + geom_sf()
worldplot
# Fillin Corona
worldplot + geom_point(data = CoronaConfirmed, aes(x = Long, y = Lat), size = 2,
shape = 23, fill = "orange")
plot(Subset$Country)
View(Subset)
plot(CoronaConfirmed$Country)
View(CoronaConfirmed)
check <- CoronaConfirmed[-2]
View(check)
check <- check[-2]
View(check)
# check
plot(check$Country)
# check
plot(check$Country.Region)
# Plot World
worldplot <- ggplot(data = world) + geom_sf()
worldplot
View(check)
Daily <- filter(is.integer(CoronaConfirmed))
Daily <- is.integer(CoronaConfirmed)
Daily <- select_if(CoronaConfirmed, is.integer)
View(Daily)
Colnames <- colnames(Daily)
# Reshape
check <- reshape(data = CoronaConfirmed, idvar = "Country.Region",
varying = (Colnames),
v.name=c("Dates"),
)
# Reshape
check <- reshape(data = CoronaConfirmed, idvar = "Country.Region",
varying = (Colnames),
v.name=c("Dates"),
new.row.names = 1:1000,
direction="long")
# Reshape
check <- reshape(data = CoronaConfirmed,
idvar = "Country.Region",
varying = (Colnames),
v.name=c("Dates"),
new.row.names = 1:100000,
direction="long")
View(check)
CoronaConfirmed
# Remove Long and Latitude
CoronaConfirmed$Lat <- NULL
CoronaConfirmed$Long <- NULL
# Reshape
ConfirmedData <- reshape(data = CoronaConfirmed,
idvar = "Country.Region",
varying = (Colnames),
v.name=c("Dates"),
new.row.names = 1:100000,
direction="long")
View(ConfirmedData)
# Reshape
ConfirmedData <- reshape(data = CoronaConfirmed,
idvar = "Country.Region",
varying = (Colnames),
v.name=c("ConfirmedCases"),
new.row.names = 1:100000,
direction="long")
# Plot
plot(ConfirmedData$Country.Region ~ ConfirmedData$ConfirmedCases)
# Plot
plot(ConfirmedData$Country.Region ~ ConfirmedData$Time)
# Plot
ggplot(ConfirmedData, aes(x = time, y = ConfirmedCases)) +
geom_point()
# Plot
ggplot(ConfirmedData, aes(x = time, y = ConfirmedCases, color = Country.Region)) +
geom_point()
# Plot
ggplot(ConfirmedData, aes(x = time, y = ConfirmedCases, color = Country.Region)) +
geom_line()
View(ConfirmedData)
check <- ConfirmedData %>% group_by(ConfirmedData)
check <- ConfirmedData %>% group_by(ConfirmedData$Country.Region)
View(check)
ConfirmedData$Country.Region <- as.character(ConfirmedData$Country.Region)
check <- ConfirmedData %>% group_by(ConfirmedData$Country.Region)
View(check)
ConfirmedData$Country.Region <- as.factor(ConfirmedData$Country.Region)
